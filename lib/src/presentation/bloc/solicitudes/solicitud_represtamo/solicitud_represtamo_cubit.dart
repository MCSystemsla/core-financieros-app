import 'dart:developer';

import 'package:bloc/bloc.dart';
import 'package:core_financiero_app/src/datasource/solicitudes/local_db/responses/represtamo_responses_local_db.dart';
import 'package:core_financiero_app/src/datasource/solicitudes/local_db/solicitudes_db_service.dart';
import 'package:core_financiero_app/src/datasource/solicitudes/represtamo/solicitud_represtamo.dart';
import 'package:core_financiero_app/src/domain/repository/solicitudes_credito/solicitudes_credito_repository.dart';
import 'package:core_financiero_app/src/presentation/bloc/auth/branch_team/branchteam_cubit.dart';
import 'package:equatable/equatable.dart';

part 'solicitud_represtamo_state.dart';

class SolicitudReprestamoCubit extends Cubit<SolicitudReprestamoState> {
  final ObjectBoxService localDbProvider;
  final SolicitudesCreditoRepository _solicitudesCreditoRepository;
  SolicitudReprestamoCubit(
      this._solicitudesCreditoRepository, this.localDbProvider)
      : super(SolicitudReprestamoInitial());

  Future<void> createSolicitudReprestamo() async {
    emit(state.copyWith(status: Status.inProgress));
    try {
      final (isOk, msg) =
          await _solicitudesCreditoRepository.createSolicitudReprestamo(
        solicitudReprestamo: SolicitudReprestamo(
          isOffline: state.isOffline,
          cuota: state.cuota.toInt(),
          monto: state.monto.toInt(),
          userIp: '',
          username: '',
          database: state.database,
          objOrigenSolicitudId: state.objOrigenSolicitudId,
          cedula: state.cedula,
          objMonedaId: state.objMonedaId,
          objPropositoId: state.objPropositoId,
          objFrecuenciaId: state.objFrecuenciaId,
          objActividadId: state.objActividadId,
          objActividadId1: state.objActividadId1,
          objActividadId2: state.objActividadId2,
          objSectorId: state.objSectorId,
          beneficiarioSeguro: state.beneficiarioSeguro,
          cedulaBeneficiarioSeguro: state.cedulaBeneficiarioSeguro,
          objParentescoBeneficiarioSeguroId:
              state.objParentescoBeneficiarioSeguroId,
          objProductoId: state.objProductoId,
          observacion: state.observacion,
          ubicacionLongitud: state.ubicacionLongitud,
          ubicacionLatitud: state.ubicacionLatitud,
          sucursal: state.sucursal,
          ubicacion: state.ubicacion,
          esPeps: state.esPeps,
          nombreDeEntidadPeps: state.nombreDeEntidadPeps,
          paisPeps: state.paisPeps,
          periodoPeps: state.periodoPeps,
          cargoOficialPeps: state.cargoOficialPeps,
          tieneFamiliarPeps: state.tieneFamiliarPeps,
          nombreFamiliarPeps2: state.nombreFamiliarPeps2,
          parentescoFamiliarPeps2: state.parentescoFamiliarPeps2,
          cargoFamiliarPeps2: state.cargoFamiliarPeps2,
          nombreEntidadPeps2: state.nombreEntidadPeps2,
          periodoPeps2: state.periodoPeps2,
          paisPeps2: state.paisPeps2,
          objRubroActividad: state.objRubroActividad,
          objActividadPredominante: state.objActividadPredominante,
          objTipoDocumentoId: state.objTipoDocumentoId,
          objRubroActividad2: state.objRubroActividad2,
          objRubroActividad3: state.objRubroActividad3,
          objRubroActividadPredominante: state.objRubroActividadPredominante,
          tipoPersona: state.tipoPersona,
          objTipoPersonaId: state.objTipoPersonaId,
          telefonoBeneficiario: state.telefonoBeneficiario,
          esFamiliarEmpleado: state.esFamiliarEmpleado,
          nombreFamiliar: state.nombreFamiliar,
          cedulaFamiliar: state.cedulaFamiliar,
          plazoSolicitud: state.plazoSolicitud,
          celularReprestamo: state.celularReprestamo,
          fechaPrimerPagoSolicitud:
              DateTime.parse(state.fechaPrimerPagoSolicitud),
        ),
      );
      if (!isOk) {
        emit(state.copyWith(errorMsg: msg, status: Status.error));
        return;
      }
      emit(state.copyWith(successMsg: msg, status: Status.done));
    } catch (e) {
      emit(state.copyWith(
        status: Status.error,
        errorMsg: e.toString(),
      ));
    }
  }

  void saveAnswers({
    bool? hasVerified,
    bool? isDone,
    int? idLocalResponse,
    String? username,
    String? userIp,
    String? database,
    String? objOrigenSolicitudId,
    String? cedula,
    int? monto,
    String? objMonedaId,
    String? objPropositoId,
    String? objFrecuenciaId,
    String? objFrecuenciaIdVer,
    int? cuota,
    String? objActividadId,
    String? objActividadId1,
    String? objActividadId2,
    String? objSectorId,
    String? beneficiarioSeguro,
    String? cedulaBeneficiarioSeguro,
    String? objParentescoBeneficiarioSeguroId,
    String? objProductoId,
    String? observacion,
    String? ubicacionLongitud,
    String? ubicacionLatitud,
    String? sucursal,
    String? ubicacion,
    bool? esPeps,
    String? nombreDeEntidadPeps,
    String? paisPeps,
    String? periodoPeps,
    String? cargoOficialPeps,
    bool? tieneFamiliarPeps,
    String? nombreFamiliarPeps2,
    String? parentescoFamiliarPeps2,
    String? cargoFamiliarPeps2,
    String? nombreEntidadPeps2,
    String? periodoPeps2,
    String? paisPeps2,
    String? objRubroActividad,
    String? objActividadPredominante,
    String? objTipoDocumentoId,
    String? objRubroActividad2,
    String? objRubroActividad3,
    String? objRubroActividadPredominante,
    String? tipoPersona,
    String? objTipoPersonaId,
    String? telefonoBeneficiario,
    String? celularReprestamo,
    bool? esFamiliarEmpleado,
    String? nombreFamiliar,
    String? cedulaFamiliar,
    int? plazoSolicitud,
    String? fechaPrimerPagoSolicitud,
    String? fechaDesembolso,
    double? tasaInteres,
    bool? isOffline,
  }) {
    emit(
      state.copyWith(
        isOffline: isOffline,
        fechaDesembolso: fechaDesembolso,
        tasaInteres: tasaInteres,
        hasVerified: hasVerified,
        isDone: isDone,
        idLocalResponse: idLocalResponse,
        username: username,
        userIp: userIp,
        database: database,
        objOrigenSolicitudId: objOrigenSolicitudId,
        cedula: cedula,
        monto: monto,
        objMonedaId: objMonedaId,
        objPropositoId: objPropositoId,
        objFrecuenciaId: objFrecuenciaId,
        objFrecuenciaIdVer: objFrecuenciaIdVer,
        cuota: cuota ?? state.cuota,
        objActividadId: objActividadId,
        objActividadId1: objActividadId1,
        objActividadId2: objActividadId2,
        objSectorId: objSectorId,
        beneficiarioSeguro: beneficiarioSeguro,
        cedulaBeneficiarioSeguro: cedulaBeneficiarioSeguro,
        objParentescoBeneficiarioSeguroId: objParentescoBeneficiarioSeguroId,
        objProductoId: objProductoId,
        observacion: observacion,
        ubicacionLongitud: ubicacionLongitud,
        ubicacionLatitud: ubicacionLatitud,
        sucursal: sucursal,
        ubicacion: ubicacion,
        esPeps: esPeps,
        nombreDeEntidadPeps: nombreDeEntidadPeps,
        paisPeps: paisPeps,
        periodoPeps: periodoPeps,
        cargoOficialPeps: cargoOficialPeps,
        tieneFamiliarPeps: tieneFamiliarPeps,
        nombreFamiliarPeps2: nombreFamiliarPeps2,
        parentescoFamiliarPeps2: parentescoFamiliarPeps2,
        cargoFamiliarPeps2: cargoFamiliarPeps2,
        nombreEntidadPeps2: nombreEntidadPeps2,
        periodoPeps2: periodoPeps2,
        paisPeps2: paisPeps2,
        objRubroActividad: objRubroActividad,
        objActividadPredominante: objActividadPredominante,
        objTipoDocumentoId: objTipoDocumentoId,
        objRubroActividad2: objRubroActividad2,
        objRubroActividad3: objRubroActividad3,
        objRubroActividadPredominante: objRubroActividadPredominante,
        tipoPersona: tipoPersona,
        objTipoPersonaId: objTipoPersonaId,
        telefonoBeneficiario: telefonoBeneficiario,
        celularReprestamo: celularReprestamo,
        esFamiliarEmpleado: esFamiliarEmpleado,
        nombreFamiliar: nombreFamiliar,
        cedulaFamiliar: cedulaFamiliar,
        plazoSolicitud: plazoSolicitud,
        fechaPrimerPagoSolicitud: fechaPrimerPagoSolicitud,
      ),
    );
    saveLocalAnswers(isUpdate: idLocalResponse != 0);
  }

  void saveLocalAnswers({bool isUpdate = false}) {
    if (state.idLocalResponse != 0) {
      log('Updating solicitud');
      localDbProvider.updateSolicitudReprestamoById(
        id: state.idLocalResponse,
        responseReprestamoLocalDb: ReprestamoResponsesLocalDb(
          isOffline: state.isOffline,
          objRubroActividad: state.objRubroActividad,
          objFrecuenciaIdVer: state.objFrecuenciaIdVer,
          fechaDesembolso: DateTime.tryParse(state.fechaDesembolso),
          createdAt: DateTime.now(),
          hasVerified: state.hasVerified,
          isDone: state.isDone,
          prestamoInteres: state.tasaInteres,
          objOrigenSolicitudId: state.objOrigenSolicitudId,
          cedula: state.cedula,
          monto: state.monto,
          objMonedaId: state.objMonedaId,
          objPropositoId: state.objPropositoId,
          objFrecuenciaId: state.objFrecuenciaId,
          cuota: state.cuota,
          objActividadId: state.objActividadId,
          objActividadId1: state.objActividadId1,
          objActividadId2: state.objActividadId2,
          objSectorId: state.objSectorId,
          beneficiarioSeguro: state.beneficiarioSeguro,
          cedulaBeneficiarioSeguro: state.cedulaBeneficiarioSeguro,
          objParentescoBeneficiarioSeguroId:
              state.objParentescoBeneficiarioSeguroId,
          objProductoId: state.objProductoId,
          observacion: state.observacion,
          ubicacionLongitud: state.ubicacionLongitud,
          ubicacionLatitud: state.ubicacionLatitud,
          sucursal: state.sucursal,
          ubicacion: state.ubicacion,
          esPeps: state.esPeps,
          nombreDeEntidadPeps: state.nombreDeEntidadPeps,
          paisPeps: state.paisPeps,
          periodoPeps: state.periodoPeps,
          cargoOficialPeps: state.cargoOficialPeps,
          tieneFamiliarPeps: state.tieneFamiliarPeps,
          nombreFamiliarPeps2: state.nombreFamiliarPeps2,
          parentescoFamiliarPeps2: state.parentescoFamiliarPeps2,
          cargoFamiliarPeps2: state.cargoFamiliarPeps2,
          nombreEntidadPeps2: state.nombreEntidadPeps2,
          periodoPeps2: state.periodoPeps2,
          paisPeps2: state.paisPeps2,
          objActividadPredominante: state.objActividadPredominante,
          objTipoDocumentoId: state.objTipoDocumentoId,
          objRubroActividad2: state.objRubroActividad2,
          objRubroActividad3: state.objRubroActividad3,
          objRubroActividadPredominante: state.objRubroActividadPredominante,
          tipoPersona: state.tipoPersona,
          objTipoPersonaId: state.objTipoPersonaId,
          telefonoBeneficiario: state.telefonoBeneficiario,
          celularReprestamo: state.celularReprestamo,
          esFamiliarEmpleado: state.esFamiliarEmpleado,
          nombreFamiliar: state.nombreFamiliar,
          cedulaFamiliar: state.cedulaFamiliar,
          plazoSolicitud: state.plazoSolicitud,
          fechaPrimerPagoSolicitud:
              DateTime.tryParse(state.fechaPrimerPagoSolicitud),
        ),
      );
      return;
    }
    log('Creando uno nuevo');
    final resp = localDbProvider.saveSolicitudesReprestamoResponses(
      responseReprestamoLocalDb: ReprestamoResponsesLocalDb(
        isOffline: state.isOffline,
        objFrecuenciaIdVer: state.objFrecuenciaIdVer,
        createdAt: DateTime.now(),
        hasVerified: state.hasVerified,
        isDone: state.isDone,
        fechaDesembolso: DateTime.tryParse(state.fechaDesembolso),
        prestamoInteres: state.tasaInteres,
        objOrigenSolicitudId: state.objOrigenSolicitudId,
        cedula: state.cedula,
        monto: state.monto,
        objMonedaId: state.objMonedaId,
        objPropositoId: state.objPropositoId,
        objFrecuenciaId: state.objFrecuenciaId,
        cuota: state.cuota,
        objActividadId: state.objActividadId,
        objActividadId1: state.objActividadId1,
        objActividadId2: state.objActividadId2,
        objSectorId: state.objSectorId,
        beneficiarioSeguro: state.beneficiarioSeguro,
        cedulaBeneficiarioSeguro: state.cedulaBeneficiarioSeguro,
        objParentescoBeneficiarioSeguroId:
            state.objParentescoBeneficiarioSeguroId,
        objProductoId: state.objProductoId,
        observacion: state.observacion,
        ubicacionLongitud: state.ubicacionLongitud,
        ubicacionLatitud: state.ubicacionLatitud,
        sucursal: state.sucursal,
        ubicacion: state.ubicacion,
        esPeps: state.esPeps,
        nombreDeEntidadPeps: state.nombreDeEntidadPeps,
        paisPeps: state.paisPeps,
        periodoPeps: state.periodoPeps,
        cargoOficialPeps: state.cargoOficialPeps,
        tieneFamiliarPeps: state.tieneFamiliarPeps,
        nombreFamiliarPeps2: state.nombreFamiliarPeps2,
        parentescoFamiliarPeps2: state.parentescoFamiliarPeps2,
        cargoFamiliarPeps2: state.cargoFamiliarPeps2,
        nombreEntidadPeps2: state.nombreEntidadPeps2,
        periodoPeps2: state.periodoPeps2,
        paisPeps2: state.paisPeps2,
        objRubroActividad: state.objRubroActividad,
        objActividadPredominante: state.objActividadPredominante,
        objTipoDocumentoId: state.objTipoDocumentoId,
        objRubroActividad2: state.objRubroActividad2,
        objRubroActividad3: state.objRubroActividad3,
        objRubroActividadPredominante: state.objRubroActividadPredominante,
        tipoPersona: state.tipoPersona,
        objTipoPersonaId: state.objTipoPersonaId,
        telefonoBeneficiario: state.telefonoBeneficiario,
        celularReprestamo: state.celularReprestamo,
        esFamiliarEmpleado: state.esFamiliarEmpleado,
        nombreFamiliar: state.nombreFamiliar,
        cedulaFamiliar: state.cedulaFamiliar,
        plazoSolicitud: state.plazoSolicitud,
        fechaPrimerPagoSolicitud:
            DateTime.tryParse(state.fechaPrimerPagoSolicitud),
      ),
    );
    emit(state.copyWith(idLocalResponse: resp.id));
  }
}
