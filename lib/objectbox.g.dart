// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/datasource/solicitudes/local_db/catalogo/catalogo_local_db.dart';
import 'src/datasource/solicitudes/local_db/catalogo/catalogo_nacionalidad_dep.db.dart';
import 'src/datasource/solicitudes/local_db/catalogo/catalogo_nacionalidad_mun.db.dart';
import 'src/datasource/solicitudes/local_db/catalogo/catalogo_nacionalidad_pais_db.dart';
import 'src/datasource/solicitudes/local_db/catalogo/catalogo_parentesco.dart';
import 'src/datasource/solicitudes/local_db/catalogo/departments_local_db.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 2155957539051073423),
      name: 'CatalogoParentesco',
      lastPropertyId: const obx_int.IdUid(4, 5790461611913583184),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6374105552846890728),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6638228479275970397),
            name: 'valor',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2092806545684967002),
            name: 'nombre',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5790461611913583184),
            name: 'type',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 1884745770876461125),
      name: 'CatalogoLocalDb',
      lastPropertyId: const obx_int.IdUid(5, 180936357922445037),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7479864557436850925),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6458622037609275421),
            name: 'valor',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6518956915383222863),
            name: 'nombre',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6807186367900511600),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 180936357922445037),
            name: 'interes',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 2126428871591254813),
      name: 'CatalogoNacionalidadPaisDb',
      lastPropertyId: const obx_int.IdUid(4, 1701118563552989107),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7726514716927943230),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5808878039317347797),
            name: 'valor',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7799313136864647636),
            name: 'nombre',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1701118563552989107),
            name: 'relacion',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 2550414786981976944),
      name: 'CatalogoNacionalidadDepDb',
      lastPropertyId: const obx_int.IdUid(5, 936079696749496987),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4246643046609101892),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5953865467489566204),
            name: 'valor',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1325340432138234989),
            name: 'nombre',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 936079696749496987),
            name: 'relacion',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 4267729037762237719),
      name: 'CatalogoNacionalidadMunDb',
      lastPropertyId: const obx_int.IdUid(4, 837362608749151407),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1248632489542377108),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7365104954132122876),
            name: 'valor',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6046505276671942156),
            name: 'nombre',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 837362608749151407),
            name: 'relacion',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 7850167120603932692),
      name: 'DepartmentsLocalDb',
      lastPropertyId: const obx_int.IdUid(3, 3087268751290875161),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2888865021694932345),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 638831871054662975),
            name: 'valor',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3087268751290875161),
            name: 'nombre',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(9, 7850167120603932692),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [
        9202958733338752880,
        5684422469629762898,
        1674317648935978538
      ],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        8004479164939835464,
        2229639635448296630,
        475466870791721722,
        8964871672081983833,
        3911703238609290790,
        145085970733923128,
        2548468207022499454,
        1933263533513327159,
        9149075065927782478,
        4231670949194548259,
        8381761593523512187,
        7187538665278236547
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    CatalogoParentesco: obx_int.EntityDefinition<CatalogoParentesco>(
        model: _entities[0],
        toOneRelations: (CatalogoParentesco object) => [],
        toManyRelations: (CatalogoParentesco object) => {},
        getId: (CatalogoParentesco object) => object.id,
        setId: (CatalogoParentesco object, int id) {
          object.id = id;
        },
        objectToFB: (CatalogoParentesco object, fb.Builder fbb) {
          final valorOffset = fbb.writeString(object.valor);
          final nombreOffset = fbb.writeString(object.nombre);
          final typeOffset = fbb.writeString(object.type);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, valorOffset);
          fbb.addOffset(2, nombreOffset);
          fbb.addOffset(3, typeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final valorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nombreParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = CatalogoParentesco(
              valor: valorParam, nombre: nombreParam, type: typeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    CatalogoLocalDb: obx_int.EntityDefinition<CatalogoLocalDb>(
        model: _entities[1],
        toOneRelations: (CatalogoLocalDb object) => [],
        toManyRelations: (CatalogoLocalDb object) => {},
        getId: (CatalogoLocalDb object) => object.id,
        setId: (CatalogoLocalDb object, int id) {
          object.id = id;
        },
        objectToFB: (CatalogoLocalDb object, fb.Builder fbb) {
          final valorOffset = fbb.writeString(object.valor);
          final nombreOffset = fbb.writeString(object.nombre);
          final typeOffset = fbb.writeString(object.type);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, valorOffset);
          fbb.addOffset(2, nombreOffset);
          fbb.addOffset(3, typeOffset);
          fbb.addFloat64(4, object.interes);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final valorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nombreParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final interesParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 12);
          final object = CatalogoLocalDb(
              valor: valorParam,
              nombre: nombreParam,
              type: typeParam,
              interes: interesParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    CatalogoNacionalidadPaisDb:
        obx_int.EntityDefinition<CatalogoNacionalidadPaisDb>(
            model: _entities[2],
            toOneRelations: (CatalogoNacionalidadPaisDb object) => [],
            toManyRelations: (CatalogoNacionalidadPaisDb object) => {},
            getId: (CatalogoNacionalidadPaisDb object) => object.id,
            setId: (CatalogoNacionalidadPaisDb object, int id) {
              object.id = id;
            },
            objectToFB: (CatalogoNacionalidadPaisDb object, fb.Builder fbb) {
              final valorOffset = fbb.writeString(object.valor);
              final nombreOffset = fbb.writeString(object.nombre);
              final relacionOffset = object.relacion == null
                  ? null
                  : fbb.writeString(object.relacion!);
              fbb.startTable(5);
              fbb.addInt64(0, object.id);
              fbb.addOffset(1, valorOffset);
              fbb.addOffset(2, nombreOffset);
              fbb.addOffset(3, relacionOffset);
              fbb.finish(fbb.endTable());
              return object.id;
            },
            objectFromFB: (obx.Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);
              final valorParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
              final nombreParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
              final relacionParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGetNullable(buffer, rootOffset, 10);
              final object = CatalogoNacionalidadPaisDb(
                  valor: valorParam,
                  nombre: nombreParam,
                  relacion: relacionParam)
                ..id =
                    const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

              return object;
            }),
    CatalogoNacionalidadDepDb:
        obx_int.EntityDefinition<CatalogoNacionalidadDepDb>(
            model: _entities[3],
            toOneRelations: (CatalogoNacionalidadDepDb object) => [],
            toManyRelations: (CatalogoNacionalidadDepDb object) => {},
            getId: (CatalogoNacionalidadDepDb object) => object.id,
            setId: (CatalogoNacionalidadDepDb object, int id) {
              object.id = id;
            },
            objectToFB: (CatalogoNacionalidadDepDb object, fb.Builder fbb) {
              final valorOffset = fbb.writeString(object.valor);
              final nombreOffset = fbb.writeString(object.nombre);
              final relacionOffset = object.relacion == null
                  ? null
                  : fbb.writeString(object.relacion!);
              fbb.startTable(6);
              fbb.addInt64(0, object.id);
              fbb.addOffset(1, valorOffset);
              fbb.addOffset(2, nombreOffset);
              fbb.addOffset(4, relacionOffset);
              fbb.finish(fbb.endTable());
              return object.id;
            },
            objectFromFB: (obx.Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);
              final valorParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
              final nombreParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
              final relacionParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGetNullable(buffer, rootOffset, 12);
              final object = CatalogoNacionalidadDepDb(
                  valor: valorParam,
                  nombre: nombreParam,
                  relacion: relacionParam)
                ..id =
                    const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

              return object;
            }),
    CatalogoNacionalidadMunDb:
        obx_int.EntityDefinition<CatalogoNacionalidadMunDb>(
            model: _entities[4],
            toOneRelations: (CatalogoNacionalidadMunDb object) => [],
            toManyRelations: (CatalogoNacionalidadMunDb object) => {},
            getId: (CatalogoNacionalidadMunDb object) => object.id,
            setId: (CatalogoNacionalidadMunDb object, int id) {
              object.id = id;
            },
            objectToFB: (CatalogoNacionalidadMunDb object, fb.Builder fbb) {
              final valorOffset = fbb.writeString(object.valor);
              final nombreOffset = fbb.writeString(object.nombre);
              final relacionOffset = object.relacion == null
                  ? null
                  : fbb.writeString(object.relacion!);
              fbb.startTable(5);
              fbb.addInt64(0, object.id);
              fbb.addOffset(1, valorOffset);
              fbb.addOffset(2, nombreOffset);
              fbb.addOffset(3, relacionOffset);
              fbb.finish(fbb.endTable());
              return object.id;
            },
            objectFromFB: (obx.Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);
              final valorParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
              final nombreParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
              final relacionParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGetNullable(buffer, rootOffset, 10);
              final object = CatalogoNacionalidadMunDb(
                  valor: valorParam,
                  nombre: nombreParam,
                  relacion: relacionParam)
                ..id =
                    const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

              return object;
            }),
    DepartmentsLocalDb: obx_int.EntityDefinition<DepartmentsLocalDb>(
        model: _entities[5],
        toOneRelations: (DepartmentsLocalDb object) => [],
        toManyRelations: (DepartmentsLocalDb object) => {},
        getId: (DepartmentsLocalDb object) => object.id,
        setId: (DepartmentsLocalDb object, int id) {
          object.id = id;
        },
        objectToFB: (DepartmentsLocalDb object, fb.Builder fbb) {
          final valorOffset = fbb.writeString(object.valor);
          final nombreOffset = fbb.writeString(object.nombre);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, valorOffset);
          fbb.addOffset(2, nombreOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final valorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nombreParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = DepartmentsLocalDb(
              valor: valorParam, nombre: nombreParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [CatalogoParentesco] entity fields to define ObjectBox queries.
class CatalogoParentesco_ {
  /// See [CatalogoParentesco.id].
  static final id =
      obx.QueryIntegerProperty<CatalogoParentesco>(_entities[0].properties[0]);

  /// See [CatalogoParentesco.valor].
  static final valor =
      obx.QueryStringProperty<CatalogoParentesco>(_entities[0].properties[1]);

  /// See [CatalogoParentesco.nombre].
  static final nombre =
      obx.QueryStringProperty<CatalogoParentesco>(_entities[0].properties[2]);

  /// See [CatalogoParentesco.type].
  static final type =
      obx.QueryStringProperty<CatalogoParentesco>(_entities[0].properties[3]);
}

/// [CatalogoLocalDb] entity fields to define ObjectBox queries.
class CatalogoLocalDb_ {
  /// See [CatalogoLocalDb.id].
  static final id =
      obx.QueryIntegerProperty<CatalogoLocalDb>(_entities[1].properties[0]);

  /// See [CatalogoLocalDb.valor].
  static final valor =
      obx.QueryStringProperty<CatalogoLocalDb>(_entities[1].properties[1]);

  /// See [CatalogoLocalDb.nombre].
  static final nombre =
      obx.QueryStringProperty<CatalogoLocalDb>(_entities[1].properties[2]);

  /// See [CatalogoLocalDb.type].
  static final type =
      obx.QueryStringProperty<CatalogoLocalDb>(_entities[1].properties[3]);

  /// See [CatalogoLocalDb.interes].
  static final interes =
      obx.QueryDoubleProperty<CatalogoLocalDb>(_entities[1].properties[4]);
}

/// [CatalogoNacionalidadPaisDb] entity fields to define ObjectBox queries.
class CatalogoNacionalidadPaisDb_ {
  /// See [CatalogoNacionalidadPaisDb.id].
  static final id = obx.QueryIntegerProperty<CatalogoNacionalidadPaisDb>(
      _entities[2].properties[0]);

  /// See [CatalogoNacionalidadPaisDb.valor].
  static final valor = obx.QueryStringProperty<CatalogoNacionalidadPaisDb>(
      _entities[2].properties[1]);

  /// See [CatalogoNacionalidadPaisDb.nombre].
  static final nombre = obx.QueryStringProperty<CatalogoNacionalidadPaisDb>(
      _entities[2].properties[2]);

  /// See [CatalogoNacionalidadPaisDb.relacion].
  static final relacion = obx.QueryStringProperty<CatalogoNacionalidadPaisDb>(
      _entities[2].properties[3]);
}

/// [CatalogoNacionalidadDepDb] entity fields to define ObjectBox queries.
class CatalogoNacionalidadDepDb_ {
  /// See [CatalogoNacionalidadDepDb.id].
  static final id = obx.QueryIntegerProperty<CatalogoNacionalidadDepDb>(
      _entities[3].properties[0]);

  /// See [CatalogoNacionalidadDepDb.valor].
  static final valor = obx.QueryStringProperty<CatalogoNacionalidadDepDb>(
      _entities[3].properties[1]);

  /// See [CatalogoNacionalidadDepDb.nombre].
  static final nombre = obx.QueryStringProperty<CatalogoNacionalidadDepDb>(
      _entities[3].properties[2]);

  /// See [CatalogoNacionalidadDepDb.relacion].
  static final relacion = obx.QueryStringProperty<CatalogoNacionalidadDepDb>(
      _entities[3].properties[3]);
}

/// [CatalogoNacionalidadMunDb] entity fields to define ObjectBox queries.
class CatalogoNacionalidadMunDb_ {
  /// See [CatalogoNacionalidadMunDb.id].
  static final id = obx.QueryIntegerProperty<CatalogoNacionalidadMunDb>(
      _entities[4].properties[0]);

  /// See [CatalogoNacionalidadMunDb.valor].
  static final valor = obx.QueryStringProperty<CatalogoNacionalidadMunDb>(
      _entities[4].properties[1]);

  /// See [CatalogoNacionalidadMunDb.nombre].
  static final nombre = obx.QueryStringProperty<CatalogoNacionalidadMunDb>(
      _entities[4].properties[2]);

  /// See [CatalogoNacionalidadMunDb.relacion].
  static final relacion = obx.QueryStringProperty<CatalogoNacionalidadMunDb>(
      _entities[4].properties[3]);
}

/// [DepartmentsLocalDb] entity fields to define ObjectBox queries.
class DepartmentsLocalDb_ {
  /// See [DepartmentsLocalDb.id].
  static final id =
      obx.QueryIntegerProperty<DepartmentsLocalDb>(_entities[5].properties[0]);

  /// See [DepartmentsLocalDb.valor].
  static final valor =
      obx.QueryStringProperty<DepartmentsLocalDb>(_entities[5].properties[1]);

  /// See [DepartmentsLocalDb.nombre].
  static final nombre =
      obx.QueryStringProperty<DepartmentsLocalDb>(_entities[5].properties[2]);
}
